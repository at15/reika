// based on https://github.com/junit-team/junit5-samples/blob/master/junit5-gradle-consumer/build.gradle
// https://docs.gradle.org/current/userguide/organizing_build_logic.html#sec:build_script_external_dependencies
buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.2'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.0'
        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.13'
    }
}

repositories {
    mavenCentral()
}

ext.junit4Version = '4.12'
ext.junitVintageVersion = '4.12.2'
ext.junitPlatformVersion = '1.0.2'
ext.junitJupiterVersion = '5.0.2'
ext.log4jVersion = '2.10.0'

apply plugin: 'java'
apply plugin: 'project-report'
apply plugin: 'jacoco'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: "net.ltgt.errorprone"
apply plugin: 'org.junit.platform.gradle.plugin'

group 'me.at15.reika'
version '0.0.1-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    // Generate metadata for reflection on method parameters
    options.compilerArgs += '-parameters'
}

task jacocoTestReportHack(type: JacocoReport) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Generates code coverage report for all Test tasks.'
    dependsOn junitPlatformTest

    sourceSets sourceSets.main
    executionData fileTree(buildDir).include('**/jacoco/*.exec')

    reports {
        html.enabled = true
        xml.enabled = true
    }
}

junitPlatform {
    // platformVersion '1.0.2'
    filters {
        engines {
            // include 'junit-jupiter', 'junit-vintage'
            // exclude 'custom-engine'
        }
        tags {
            // include 'fast'
            exclude 'slow'
        }
        // includeClassNamePattern '.*Test'
    }
    // configurationParameter 'junit.jupiter.conditions.deactivate', '*'
    // enableStandardTestTask true
    // reportsDir file('build/test-results/junit-platform') // this is the default
    logManager 'org.apache.logging.log4j.jul.LogManager'
}

dependencies {
    compile group: 'org.antlr', name: 'antlr4-runtime', version: '4.7'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4jVersion
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: log4jVersion
    compile group: 'org.jline', name: 'jline', version: '3.5.1'
    compile group: 'com.beust', name: 'jcommander', version: '1.72'
    compile group: 'com.google.guava', name: 'guava', version: '23.5-jre'

    // JUnit Jupiter API and TestEngine implementation
    testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
    // To avoid compiler warnings about @API annotations in JUnit code
    testCompileOnly('org.apiguardian:apiguardian-api:1.0.0')
    // To use Log4J's LogManager
    testRuntime("org.apache.logging.log4j:log4j-core:${log4jVersion}")
    testRuntime("org.apache.logging.log4j:log4j-jul:${log4jVersion}")
}

// deprecated: SimpleBin is only used for presentation, it is kept here as an example of writing gradle task
task genSimpleBin {
    doLast {
        exec {
            println "Generate parser for Playground SimpleBin"
            workingDir "./src/main/java/me/at15/reika/playground"
            commandLine 'java', '-cp', "$projectDir/third_party/antlr-4.7-complete.jar", '-Xmx500M',
                    'org.antlr.v4.Tool', '-visitor', '-no-listener', '-package', 'me.at15.reika.playground', 'SimpleBin.g4'
        }
    }
}

afterEvaluate {
    def junitPlatformTest = tasks.junitPlatformTest

    jacoco {
        applyTo(junitPlatformTest)
    }

    task jacocoJunit5TestReport(type: JacocoReport) {
        executionData junitPlatformTest
        sourceSets sourceSets.main
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)

        reports {
            xml.enabled true
            html.enabled true
        }
    }
}